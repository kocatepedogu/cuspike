real ms = 1e-3;
real mV = 1e-3;
real nS = 1e-9;

// Constants
real area = 20000e-12;  // Converted to cm^2
real Cm = 1e-2 * area;  // Converted to Farads
real gl = 5e-1 * area;  // Converted to Siemens
real El = -60e-3;  // Converted to Volts
real EK = -90e-3;  // Converted to Volts
real ENa = 50e-3;  // Converted to Volts
real g_na = 100 * 10 * area;  // Converted to Siemens
real g_kd = 30 * 10 * area;  // Converted to Siemens
real VT = -63e-3;  // Converted to Volts
real taue = 5e-3;  // Converted to seconds
real taui = 10e-3;  // Converted to seconds
real Ee = 0e-3;  // Converted to Volts
real Ei = -80e-3;  // Converted to Volts
real we = 6e-9;  // Converted to Siemens
real wi = 67e-9;  // Converted to Siemens
real Vt = -20e-3;

real refractoriness = 3*ms;
real dt = 0.01*ms;
real T = 5000*ms;

int N = 100000;
int Ne = 0.8 * N;

Neuron {
  real r = 0;

  real v = El - 5*mV;
  real ge = 4 * 10.0*nS;
  real gi = 20 * 10.0*nS;

  real m = alpha_m(v) / (alpha_m(v) + beta_m(v));
  real n = alpha_n(v) / (alpha_n(v) + beta_n(v));
  real h = alpha_h(v) / (alpha_h(v) + beta_h(v));

  real exprel(real x) {
    return (exp(x) - 1) / x;
  };

  real alpha_m(real _v) {
    return 0.32 * 4 / (exprel((13 - (_v - VT)/mV) / 4)) / ms;
  };

  real beta_m(real _v) {
    return 0.28 * 5 / (exprel(((_v - VT)/mV - 40) / 5)) / ms;
  };

  real alpha_h(real _v) {
    return 0.128 * exp((17 - (_v - VT)/mV) / 18) / ms;
  };

  real beta_h(real _v) {
    return 4 / (1 + exp((40 - (_v - VT)/mV) / 5)) / ms;
  };

  real alpha_n(real _v) {
    return 0.032 * 5 / (exprel((15 - (_v - VT)/mV) / 5)) / ms;
  };

  real beta_n(real _v) {
    return 0.5 * exp((10 - (_v - VT)/mV) / 40) / ms;
  };

  always {
    // Synaptic currents
    real Isyn = ge * (Ee - v) + gi * (Ei - v);

    // Ion channel currents
    real I_Na = g_na * pow(m, 3) * h * (v - ENa);
    real I_Kd = g_kd * pow(n, 4) * (v - EK);

    // Membrane potential update
    real dv = (gl * (El - v) + Isyn - I_Na - I_Kd) / Cm;
    v += dv * dt;

    // Gate variables update
    real dm = alpha_m(v) * (1 - m) - beta_m(v) * m;
    real dn = alpha_n(v) * (1 - n) - beta_n(v) * n;
    real dh = alpha_h(v) * (1 - h) - beta_h(v) * h;

    m += dm * dt;
    n += dn * dt;
    h += dh * dt;

    // Synaptic conductances update
    real dge = -ge / taue;
    real dgi = -gi / taui;

    ge += dge * dt;
    gi += dgi * dt;
  };

  always @(spike) {
    if (pre < Ne) {
      ge += we;
    } else if (pre < N) {
      gi += wi;
    };
  };
};
